/**
 * Time Advance Dialog - Comprehensive time advancement with confirmation
 */

import { CalendarLocalization } from '../core/calendar-localization';

export class TimeAdvanceDialog extends foundry.applications.api.HandlebarsApplicationMixin(foundry.applications.api.ApplicationV2) {
  private static activeInstance: TimeAdvanceDialog | null = null;

  static DEFAULT_OPTIONS = {
    id: 'seasons-stars-time-advance',
    classes: ['seasons-stars', 'time-advance-dialog'],
    tag: 'div',
    window: {
      frame: true,
      positioned: true,
      title: 'SEASONS_STARS.advance.title',
      icon: 'fas fa-fast-forward',
      minimizable: false,
      resizable: false
    },
    position: {
      width: 480,
      height: 'auto'
    },
    actions: {
      advance: TimeAdvanceDialog.prototype._onAdvance,
      cancel: TimeAdvanceDialog.prototype._onCancel,
      presetAdvance: TimeAdvanceDialog.prototype._onPresetAdvance
    }
  };

  static PARTS = {
    main: {
      template: 'modules/seasons-and-stars/templates/time-advance-dialog.hbs'
    }
  };

  /**
   * Prepare rendering context for template
   */
  async _prepareContext(options = {}): Promise<any> {
    const context = await super._prepareContext(options);
    
    const manager = game.seasonsStars?.manager;
    
    if (!manager) {
      return Object.assign(context, {
        error: 'Calendar manager not initialized',
        currentDate: 'Unknown',
        calendar: null,
        presets: []
      });
    }

    const activeCalendar = manager.getActiveCalendar();
    const currentDate = manager.getCurrentDate();
    
    if (!activeCalendar || !currentDate) {
      return Object.assign(context, {
        error: 'No active calendar',
        currentDate: 'No Calendar Active',
        calendar: null,
        presets: []
      });
    }

    const calendarInfo = CalendarLocalization.getLocalizedCalendarInfo(activeCalendar);
    
    // Define preset advancement options
    const presets = [
      { amount: 1, unit: 'hours', label: '1 Hour', icon: 'fas fa-clock' },
      { amount: 4, unit: 'hours', label: '4 Hours', icon: 'fas fa-clock' },
      { amount: 8, unit: 'hours', label: '8 Hours (Work Day)', icon: 'fas fa-briefcase' },
      { amount: 1, unit: 'days', label: '1 Day', icon: 'fas fa-sun' },
      { amount: 3, unit: 'days', label: '3 Days', icon: 'fas fa-calendar-day' },
      { amount: 1, unit: 'weeks', label: '1 Week', icon: 'fas fa-calendar-week' },
      { amount: 2, unit: 'weeks', label: '2 Weeks (Fortnight)', icon: 'fas fa-calendar-alt' },
      { amount: 1, unit: 'months', label: '1 Month', icon: 'fas fa-calendar' },
      { amount: 3, unit: 'months', label: '3 Months (Season)', icon: 'fas fa-leaf' },
      { amount: 6, unit: 'months', label: '6 Months', icon: 'fas fa-calendar-minus' },
      { amount: 1, unit: 'years', label: '1 Year', icon: 'fas fa-history' }
    ];
    
    return Object.assign(context, {
      calendar: calendarInfo,
      currentDate: currentDate.toLongString(),
      shortDate: currentDate.toDateString(),
      timeString: currentDate.toTimeString(),
      isGM: game.user?.isGM || false,
      canAdvanceTime: game.user?.isGM || false,
      presets: presets,
      units: [
        { value: 'minutes', label: 'Minutes' },
        { value: 'hours', label: 'Hours' },
        { value: 'days', label: 'Days' },
        { value: 'weeks', label: 'Weeks' },
        { value: 'months', label: 'Months' },
        { value: 'years', label: 'Years' }
      ]
    });
  }

  /**
   * Instance action handler for advancing time
   */
  async _onAdvance(event: Event, target: HTMLElement): Promise<void> {
    event.preventDefault();
    
    const form = target.closest('form') as HTMLFormElement;
    if (!form) return;

    const formData = new FormData(form);
    const amount = parseInt(formData.get('amount') as string || '0');
    const unit = formData.get('unit') as string || 'days';
    
    if (amount <= 0) {
      ui.notifications?.warn('Please enter a positive number');
      return;
    }

    // Show confirmation for large advances
    const shouldConfirm = this.shouldConfirmAdvancement(amount, unit);
    
    if (shouldConfirm) {
      const confirmed = await this.showConfirmationDialog(amount, unit);
      if (!confirmed) return;
    }

    await this.performAdvancement(amount, unit);
    this.close();
  }

  /**
   * Instance action handler for preset advancement
   */
  async _onPresetAdvance(event: Event, target: HTMLElement): Promise<void> {
    event.preventDefault();
    
    const amount = parseInt(target.dataset.amount || '0');
    const unit = target.dataset.unit || 'days';
    
    if (amount <= 0) return;

    // Show confirmation for large advances
    const shouldConfirm = this.shouldConfirmAdvancement(amount, unit);
    
    if (shouldConfirm) {
      const confirmed = await this.showConfirmationDialog(amount, unit);
      if (!confirmed) return;
    }

    await this.performAdvancement(amount, unit);
    this.close();
  }

  /**
   * Instance action handler for canceling
   */
  async _onCancel(event: Event, target: HTMLElement): Promise<void> {
    event.preventDefault();
    this.close();
  }

  /**
   * Determine if advancement requires confirmation
   */
  private shouldConfirmAdvancement(amount: number, unit: string): boolean {
    // Require confirmation for:
    // - More than 1 day
    // - More than 12 hours
    // - Any weeks, months, or years
    switch (unit) {
      case 'hours':
        return amount > 12;
      case 'days':
        return amount > 1;
      case 'weeks':
      case 'months':
      case 'years':
        return true;
      default:
        return false;
    }
  }

  /**
   * Show confirmation dialog for large time advances
   */
  private async showConfirmationDialog(amount: number, unit: string): Promise<boolean> {
    const manager = game.seasonsStars?.manager;
    if (!manager) return false;

    const currentDate = manager.getCurrentDate();
    if (!currentDate) return false;

    // Calculate the target date
    let targetDate;
    try {
      const engine = manager.getActiveEngine();
      if (!engine) return false;

      switch (unit) {
        case 'minutes':
          // For minutes, calculate via time advancement
          const currentTime = currentDate.time || { hour: 0, minute: 0, second: 0 };
          const totalMinutes = currentTime.hour * 60 + currentTime.minute + amount;
          const newHour = Math.floor(totalMinutes / 60) % 24;
          const newMinute = totalMinutes % 60;
          targetDate = { 
            ...currentDate.toObject(), 
            time: { hour: newHour, minute: newMinute, second: currentTime.second }
          };
          break;
        case 'hours':
          const currentHour = currentDate.time?.hour || 0;
          const newHours = (currentHour + amount) % 24;
          const extraDays = Math.floor((currentHour + amount) / 24);
          let baseDate = currentDate.toObject();
          if (extraDays > 0) {
            baseDate = engine.addDays(baseDate, extraDays);
          }
          targetDate = { 
            ...baseDate, 
            time: { ...currentDate.time, hour: newHours }
          };
          break;
        case 'days':
          targetDate = engine.addDays(currentDate.toObject(), amount);
          break;
        case 'weeks':
          targetDate = engine.addDays(currentDate.toObject(), amount * 7);
          break;
        case 'months':
          targetDate = engine.addMonths(currentDate.toObject(), amount);
          break;
        case 'years':
          targetDate = engine.addYears(currentDate.toObject(), amount);
          break;
        default:
          return false;
      }

      const targetCalendarDate = new (await import('../core/calendar-date')).CalendarDate(
        targetDate, 
        manager.getActiveCalendar()!
      );

      const content = `
        <div class="time-advance-confirmation">
          <p><strong>Current:</strong> ${currentDate.toLongString()}</p>
          <p><strong>Target:</strong> ${targetCalendarDate.toLongString()}</p>
          <p class="advance-warning">
            <i class="fas fa-exclamation-triangle"></i>
            You are about to advance time by <strong>${amount} ${unit}</strong>.
          </p>
          <p class="note">This will affect all connected players and cannot be easily undone.</p>
        </div>
      `;

      return foundry.applications.api.DialogV2.confirm({
        window: { title: "Confirm Time Advancement" },
        content: content,
        modal: true,
        rejectClose: false,
        yes: { icon: "fas fa-check", label: "Advance Time" },
        no: { icon: "fas fa-times", label: "Cancel" }
      });

    } catch (error) {
      console.error('Seasons & Stars | Error calculating target date:', error);
      return false;
    }
  }

  /**
   * Perform the actual time advancement
   */
  private async performAdvancement(amount: number, unit: string): Promise<void> {
    const manager = game.seasonsStars?.manager;
    if (!manager) {
      ui.notifications?.error('Calendar manager not available');
      return;
    }

    try {
      switch (unit) {
        case 'minutes':
          await manager.advanceMinutes(amount);
          break;
        case 'hours':
          await manager.advanceHours(amount);
          break;
        case 'days':
          await manager.advanceDays(amount);
          break;
        case 'weeks':
          await manager.advanceWeeks(amount);
          break;
        case 'months':
          await manager.advanceMonths(amount);
          break;
        case 'years':
          await manager.advanceYears(amount);
          break;
        default:
          ui.notifications?.error(`Unknown time unit: ${unit}`);
          return;
      }

      ui.notifications?.info(`Advanced time by ${amount} ${unit}`);
      
    } catch (error) {
      console.error('Seasons & Stars | Error advancing time:', error);
      ui.notifications?.error('Failed to advance time');
    }
  }

  /**
   * Handle closing the dialog
   */
  async close(options: any = {}): Promise<void> {
    // Clear active instance if this is it
    if (TimeAdvanceDialog.activeInstance === this) {
      TimeAdvanceDialog.activeInstance = null;
    }
    
    return super.close(options);
  }

  /**
   * Show the time advance dialog
   */
  static show(): void {
    if (TimeAdvanceDialog.activeInstance) {
      if (!TimeAdvanceDialog.activeInstance.rendered) {
        TimeAdvanceDialog.activeInstance.render(true);
      } else {
        TimeAdvanceDialog.activeInstance.bringToTop();
      }
    } else {
      TimeAdvanceDialog.activeInstance = new TimeAdvanceDialog();
      TimeAdvanceDialog.activeInstance.render(true);
    }
  }

  /**
   * Hide the time advance dialog
   */
  static hide(): void {
    if (TimeAdvanceDialog.activeInstance?.rendered) {
      TimeAdvanceDialog.activeInstance.close();
    }
  }
}